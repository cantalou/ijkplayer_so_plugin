apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven'
apply plugin: 'maven-publish'

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += configurations.compile
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        variant.javaCompile.classpath.files.each {
            classpath += project.files(it)
        }
    }
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version true
        links "http://docs.oracle.com/javase/7/docs/api"
        title PROJ_ARTIFACTID
    }
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
        }
    }
    developers {
        developer {
            id DEVELOPER_ID
            name DEVELOPER_NAME
            email DEVELOPER_EMAIL
        }
    }
}

publishing {
    publications {
        MyPublication(MavenPublication) {

            groupId PROJ_GROUP
            artifactId PROJ_ARTIFACTID
            version PROJ_VERSION

            artifact sourcesJar
            artifact javadocJar
            artifact "${project.buildDir}/outputs/aar/${project.name}-release.aar"

            pom.withXml {
                def root = asNode()
                def dependenciesNode = root.appendNode('dependencies')
                configurations.compile.allDependencies.findAll { it.name != 'unspecified' && it.name != null}.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                    
                    if (it.excludeRules.size() > 0) {
                        def exclusionsNode = dependencyNode.appendNode('exclusions')
                        it.excludeRules.each { rule ->
                           def exclusionNode = exclusionsNode.appendNode('exclusion')
                           exclusionNode.appendNode('groupId', rule.group)
                           exclusionNode.appendNode('artifactId', rule.module)
                        }
                    }
                }
                root.appendNode('description', PROJ_DESCRIPTION)
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = BINTRAY_USER
    key = BINTRAY_KEY

    publications = ['MyPublication']
    publish = true //[Default: false] Whether version should be auto published after an upload
    pkg {
        repo = 'maven'
        userOrg = user
        name = PROJ_NAME
        desc = PROJ_DESCRIPTION
        websiteUrl = PROJ_WEBSITEURL
        issueTrackerUrl = PROJ_ISSUETRACKERURL
        vcsUrl = PROJ_VCSURL
        licenses = ['Apache-2.0']
        publicDownloadNumbers = true

        version {
            name = PROJ_VERSION
            vcsTag = PROJ_VERSION
        }
    }
}
